<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>$(NetVersion)</TargetFramework>
    <RuntimeIdentifier>browser-wasm</RuntimeIdentifier>
    <!--TODO: See of we can remove this-->
    <!--<WasmMainJSPath>../dist/main.js</WasmMainJSPath>-->
    <OutputType>Exe</OutputType>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    
    <!--We don't know exactly what dlls the user might need to compile their program. For now, compile and serve all of them -->
    <IsTrimmable>true</IsTrimmable>
    <PublishTrimmed>true</PublishTrimmed>
    
    <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
    <SuppressTrimAnalysisWarnings>false</SuppressTrimAnalysisWarnings>

    <!-- Space savings when trimming -->
    <TrimmerRemoveSymbols>true</TrimmerRemoveSymbols>
    <DebuggerSupport>false</DebuggerSupport>
    <UseNativeHttpHandler>true</UseNativeHttpHandler>

    <!-- TOOD: Test publishing-->
    <!--<RunAOTCompilation>true</RunAOTCompilation>-->

    <!--TODO: Write this variable to an env file to be read by Vite during build, so that assembly lookup is done correctly -->
    <!--TODO: How would we use this in the plugin/export it from WasmCompiler? -->
    <WasmRuntimeAssetsLocation>./</WasmRuntimeAssetsLocation>

    <!-- TODO: Investigate using Webcil format for better compatibility - how do we load DLLs when packaged in this format?-->
    <WasmEnableWebcil>false</WasmEnableWebcil>

  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Jab" Version="0.8.6" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.4.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Features" Version="4.4.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="8.0.0-rc.2.23479.6" />
    <PackageReference Include="System.Net.Http" Version="4.3.4" />
  </ItemGroup>

  <PropertyGroup Condition="$(Configuration) == 'Debug'">
    <WasmNativeStrip>false</WasmNativeStrip>
    <WasmEmitSymbolMap>true</WasmEmitSymbolMap>
    <!--from https://github.com/dotnet/runtime/blob/main/docs/workflow/debugging/mono/wasm-debugging.md#collecting-stack-traces-with-symbols-in-blazor -->
    <WasmBuildNative>true</WasmBuildNative>
    <WasmDebugLevel>1</WasmDebugLevel>
  </PropertyGroup>

  <PropertyGroup>
    <PackageJsonFile>$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)/../package.json'))</PackageJsonFile>
  </PropertyGroup>
  
    <!-- WasmAppDir is not defined yet. -->
    <!-- hardcoded for now until https://github.com/dotnet/runtime/issues/77285 -->
  <ItemGroup>
    <!-- TODO: Replace with a transform *.ts -> *.js to handle all files and nested files, alos verify if this actually works, as the ts files will be built and so will be different -->
    <UpToDateCheckBuilt Include="$(OutputPath)/AppBundle/main.js" Original="$(MSBuildThisFileDirectory)/main.ts" />
    <UpToDateCheckBuilt Include="$(OutputPath)/AppBundle/WasmCompiler.js" Original="$(MSBuildThisFileDirectory)/WasmCompiler.ts" />
    <UpToDateCheckBuilt Include="$(OutputPath)/AppBundle/package.json" Original="$(PackageJsonFile)" />
  </ItemGroup>

  <ItemGroup Condition="'$(PublishTrimmed)' == 'True'">
    <!-- NativeAOT -->
    <RdXmlFile Include="rd.xml" />
    <!-- ILLink -->
    <TrimmerRootDescriptor Include="roots.xml" />
  </ItemGroup>

  <!--Hide node modules and dist folder-->
  <ItemGroup>
    <None Remove="node_modules/**/*" />
    <None Remove="dist/**/*" />
  </ItemGroup>

  <Target Name="InitializeWasmAppDir" AfterTargets="WasmBuildApp">
    <PropertyGroup>
      <WasmAppDir>$([MSBuild]::NormalizePath('$(OutputPath)/AppBundle'))</WasmAppDir>
    </PropertyGroup>
  </Target>
  
  <Target Name="_CopyDotNetTypesDeclarationFile" AfterTargets="WasmBuildApp" DependsOnTargets="InitializeWasmAppDir" Condition="'$(WasmBuildingForNestedPublish)' != 'True'">
    <PropertyGroup>
      <_DotNetTypePath>$(OutputPath)dotnet.d.ts</_DotNetTypePath>
    </PropertyGroup>
    <Message Importance="High" Text="Copying dotnet.d.ts from $(OutputPath)dotnet.d.ts to $(WasmAppDir)$(WasmRuntimeAssetsLocation) and $(MSBuildThisFileDirectory)$(WasmRuntimeAssetsLocation)" />
    <ItemGroup>
      <FilesToCopy Include="$(_DotNetTypePath)" />
    </ItemGroup>
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="$(WasmAppDir)$(WasmRuntimeAssetsLocation)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="$(MSBuildThisFileDirectory)$(WasmRuntimeAssetsLocation)" SkipUnchangedFiles="true" />
  </Target>

  <Target Name="_EnsureTypeScriptOfRequiredVersionInstalled" AfterTargets="WasmBuildApp" DependsOnTargets="InitializeWasmAppDir" Condition="'$(WasmBuildingForNestedPublish)' != 'True' and '$(_RanTscDependencyCheck)' != 'True'">
    <Message Importance="high" Text="Checking dependencies"></Message>
    <Exec Command="pnpm exec tsc --version" ConsoleToMSBuild="true" IgnoreExitCode="true" ContinueOnError="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="TscVersionCheckOutput" />
    </Exec>
    <Message Importance="high" Text="tsc check output: $(TscVersionCheckOutput)"></Message>
    <PropertyGroup>
      <TypeScriptInstalledForCompile>$(TscVersionCheckOutput.StartsWith('Version 5.'))</TypeScriptInstalledForCompile>
    </PropertyGroup>
    <Message Importance="high" Text="Is TSC installed? $(TypeScriptInstalledForCompile)"></Message>
    <Message Importance="high" Text="TypeScript already installed, skipping install step." Condition="$(TypeScriptInstalledForCompile) == 'True'"></Message>
    <Message Importance="high" Text="TypeScript not installed. Installing TypeScript uisng pnpm install." Condition="$(TypeScriptInstalledForCompile) != 'True'"></Message>
    <Exec Command="pnpm install" Condition="$(TypeScriptInstalledForCompile) != 'True'" />
    <PropertyGroup>
      <_RanTscDependencyCheck>True</_RanTscDependencyCheck>
    </PropertyGroup>
  </Target>

  <Target Name="_TypeScriptCompileAferBuild" AfterTargets="WasmBuildApp" DependsOnTargets="_EnsureTypeScriptOfRequiredVersionInstalled;">
    <Message Importance="high" Text="Compiling TypeScript code to $(WasmAppDir)"></Message>
    <Exec Command="pnpm exec tsc -p ./tsconfig.json -outDir $(WasmAppDir)"></Exec>
  </Target>

  <Target Name="_CopyPackageJsonToWasmAppDir" AfterTargets="_TypeScriptCompileAferBuild">
    <Message Importance="high" Text="Copying package.json $(PackageJsonFile) file to $(WasmAppDir)/package.json"></Message>
    <Copy ContinueOnError="false" SourceFiles="$(PackageJsonFile)" DestinationFiles="$(WasmAppDir)/package.json" />
  </Target>

  <Target Name="RepublishDeps" AfterTargets="WasmTriggerPublishApp" DependsOnTargets="InitializeWasmAppDir" Condition="!Exists('$(WasmAppDir)/WasmCompiler.js')">
    <Message Importance="high" Text="Rerunning compile step as previous outputs have been overwritten by the WasmTriggerPublishApp target" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_TypeScriptCompileAferBuild;_CopyPackageJsonToWasmAppDir" Properties="_RanTscDependencyCheck=$(_RanTscDependencyCheck);WasmAppDir=$(WasmAppDir)">
    </MSBuild>
  </Target>
    
</Project>