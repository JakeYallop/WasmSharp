<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>$(NetVersion)</TargetFramework>
    <RuntimeIdentifier>browser-wasm</RuntimeIdentifier>
    <WasmMainJSPath>../dist/main.js</WasmMainJSPath>
    <OutputType>Exe</OutputType>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <!--We don't know exactly what dlls the user might need to compile their program. For now, compile and serve all of them -->
    <PublishTrimmed>false</PublishTrimmed>
    <!-- TOOD: Test publishing-->
    <!--<RunAOTCompilation>true</RunAOTCompilation>-->

    <!--TODO: Write this variable to an env file to be read by Vite during build, so that assembly lookup is done correctly -->
    <WasmRuntimeAssetsLocation>./</WasmRuntimeAssetsLocation>

    <!-- TODO: Investigate using Webcil format for better compatibility - how do we load DLLs when packaged in this format?-->
    <WasmEnableWebcil>false</WasmEnableWebcil>

    <WasmDebugLevel>-1</WasmDebugLevel>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Jab" Version="0.8.6" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.4.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Features" Version="4.4.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="8.0.0-rc.2.23479.6" />
    <PackageReference Include="System.Net.Http" Version="4.3.4" />
  </ItemGroup>

  <PropertyGroup Condition="$(Configuration) == 'Debug'">
    <WasmNativeStrip>false</WasmNativeStrip>
    <WasmEmitSymbolMap>true</WasmEmitSymbolMap>
    <!--from https://github.com/dotnet/runtime/blob/main/docs/workflow/debugging/mono/wasm-debugging.md#collecting-stack-traces-with-symbols-in-blazor -->
    <WasmBuildNative>true</WasmBuildNative>
  </PropertyGroup>

  <PropertyGroup>
    <PackageJsonFile>$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)/../package.json'))</PackageJsonFile>
  </PropertyGroup>

  <ItemGroup>
    <!-- WasmAppDir is not defined yet. -->
    <!-- hardcoded for now until https://github.com/dotnet/runtime/issues/77285 -->
    <UpToDateCheckBuilt Include="$(OutputPath)/AppBundle/main.js" Original="$(MSBuildThisFileDirectory)/../dist/main.js" />
    <UpToDateCheckBuilt Include="$(OutputPath)/AppBundle/index.js" Original="$(MSBuildThisFileDirectory)/../dist/index.js" />
    <UpToDateCheckBuilt Include="$(OutputPath)/AppBundle/WasmCompiler.js" Original="$(MSBuildThisFileDirectory)/../dist/WasmCompiler.js" />
    <UpToDateCheckBuilt Include="$(OutputPath)/AppBundle/package.json" Original="$(PackageJsonFile)" />
  </ItemGroup>

  <!--Hide node modules and dist folder-->
  <ItemGroup>
    <None Remove="node_modules/**/*" />
    <None Remove="dist/**/*" />
  </ItemGroup>

  <!--Copy dotnet.d.ts to AppBundle directory-->
  <Target Name="CopyDotNetTypesDeclarationFile" AfterTargets="WasmBuildApp" DependsOnTargets="WasmBuildApp" Condition="'$(WasmAppDir)' != ''">
    <PropertyGroup>
      <_DotNetTypePath>$(OutputPath)dotnet.d.ts</_DotNetTypePath>
    </PropertyGroup>
    <Message Importance="High" Text="Copying dotnet.d.ts from $(OutputPath)dotnet.d.ts to $(WasmAppDir)$(WasmRuntimeAssetsLocation) and $(MSBuildThisFileDirectory)$(WasmRuntimeAssetsLocation)" />
    <ItemGroup>
      <FilesToCopy Include="$(_DotNetTypePath)" />
    </ItemGroup>
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="$(WasmAppDir)$(WasmRuntimeAssetsLocation)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="$(MSBuildThisFileDirectory)$(WasmRuntimeAssetsLocation)" SkipUnchangedFiles="true" />
  </Target>

  <!-- Copy dist folder and other required artifacts -->
  <Target Name="_PrivateCopyRequiredArtifacts" AfterTargets="WasmBuildApp" DependsOnTargets="WasmBuildApp" Condition="'$(WasmAppDir)' != ''">
    <ItemGroup>
      <__FilesToCopy Include="$(MSBuildThisFileDirectory)../dist/**/*.*" />
      <__FilesToCopy Include="$(PackageJsonFile)" />
    </ItemGroup>
    <Copy SkipUnchangedFiles="true" SourceFiles="@(__FilesToCopy)" DestinationFolder="$(WasmAppDir)\%(RecursiveDir)" />
  </Target>

  <Target Name="TypeScriptCompileAferPublish" AfterTargets="WasmTriggerPublishApp">
    <PropertyGroup Condition="'$(WasmAppDir)' == ''">
      <WasmAppDir>$([MSBuild]::NormalizePath('$(OutputPath)/AppBundle'))</WasmAppDir>
    </PropertyGroup>

    <Message Importance="high" Text="Checking dependencies"></Message>
    <Exec Command="pnpm exec tsc --version" ConsoleToMSBuild="true" IgnoreExitCode="true" ContinueOnError="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="TscVersionCheckOutput"/>
    </Exec>
    
    <Message Importance="high" Text="tsc check output: $(TscVersionCheckOutput)"></Message>
    <PropertyGroup>
      <TypeScriptInstalledForCompile>$(TscVersionCheckOutput.StartsWith('Version 5.'))</TypeScriptInstalledForCompile>
    </PropertyGroup>
    <Message Importance="high" Text="Is TSC installed? $(TypeScriptInstalledForCompile)"></Message>
    <Message Importance="high" Text="TypeScript already installed, skipping install step."  Condition="$(TypeScriptInstalledForCompile) == 'True'"></Message>
    <Message Importance="high" Text="TypeScript not installed. Installing TypeScript uisng pnpm install."  Condition="$(TypeScriptInstalledForCompile) != 'True'"></Message>
    
    <Exec Command="pnpm install" Condition="$(TypeScriptInstalledForCompile) != 'True'"/>
    <Message Importance="high" Text="Compiling TypeScript code to $(WasmAppDir)"></Message>
    <Exec Command="pnpm exec tsc -p ./tsconfig.json -outDir $(WasmAppDir)"></Exec>
  </Target>

  <Target Name="CopyPackageJsonToAppBundle" AfterTargets="TypeScriptCompileAferPublish">
    <Message Importance="high" Text="Copying package.json $(PackageJsonFile) file to $(WasmAppDir)"></Message>
    <Copy SourceFiles="$(PackageJsonFile)" DestinationFiles="$(WasmAppDir)/package.json" />
  </Target>

  <Target Name="RunPnpmPack" AfterTargets="WasmTriggerPublishApp" DependsOnTargets="CopyPackageJsonToAppBundle;TypeScriptCompileAferPublish">
    <PropertyGroup>
      <PackOutputDir Condition="'$(PackOutputDir)' == ''">.</PackOutputDir>
    </PropertyGroup>
    <Message Importance="high" Text="Create tarball package at $(PackOutputDir)" />
    <Exec Command="pnpm pack --pack-destination $(PackOutputDir)" WorkingDirectory="$(WasmAppDir)" />
  </Target>
</Project>

<!-- IsPublishable = false -->
<!-- Also - run certain targets _after_ the publish task-->